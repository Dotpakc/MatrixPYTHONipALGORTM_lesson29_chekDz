from datetime import datetime

from aiogram import types
from loader import dp


from aiogram.dispatcher import FSMContext

from aiogram.dispatcher.filters.state import State, StatesGroup

from db_film.utils import *

class FilmRental(StatesGroup):
    select_film = State()
    day = State()
    time = State()
    count = State()
    checkout = State()


def gen_keybord_pagination(films, current_page=1):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if current_page == 1:
        markup.add(
            types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'page_{current_page+1}')
        )
    elif current_page == len(films):
        markup.add(
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'page_{current_page-1}')
        )
    else:
        markup.add(
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'page_{current_page-1}'),
            types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'page_{current_page+1}')
        )
    return markup


@dp.callback_query_handler(text='films')
async def show_films(call: types.CallbackQuery, state: FSMContext):
    films = get_films_in_rental() # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ —è–∫—ñ —î –≤ –ø—Ä–æ–∫–∞—Ç—ñ
    film  = films[0]
    
    trailer = film['trailer']
    image = film['image']
    
    markup = gen_keybord_pagination(films)
    markup.add(
        types.InlineKeyboardButton(text='üé¨ –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ —é—Ç—É–±', url=trailer),
        types.InlineKeyboardButton(text='üé¨ –¢—Ä–µ–π–ª–µ—Ä', callback_data='trailer'),
        types.InlineKeyboardButton(text='üéüÔ∏è –ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫', callback_data='buy_ticket'),
        types.InlineKeyboardButton(text='üëà –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main_back')
    )
    
    text = f'üé¨ <b>–§—ñ–ª—å–º –≤ –ø—Ä–æ–∫–∞—Ç—ñ:</b>\n\n'
    text += f"<b>–ù–∞–∑–≤–∞:</b> {film['title']}\n"
    text += f"<b>–û–ø–∏—Å:</b> {film['description']}\n\n"
    text += f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {film['rating']}\n"
    text += f"<b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {film['duration']}\n"
    text += f"<b>–ñ–∞–Ω—Ä:</b> {film['genre']}\n"
    text += f"<b>–¶—ñ–Ω–∞ –±—ñ–ª–µ—Ç—É:</b> {film['price']} –≥—Ä–Ω\n"
    
    await call.message.answer_photo(image, caption=text, reply_markup=markup, parse_mode='HTML')
    await call.message.delete()
    
    await FilmRental.select_film.set()
    
    await state.update_data(film = film)
    
@dp.callback_query_handler(text='trailer', state=FilmRental.select_film)
async def show_trailer(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    film = data.get('film')
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥', callback_data=f'page_{film["id"]}')
    )
    await call.message.answer(f"<a href='{film['trailer']}'>üé¨ {film['title']}</a>\n{film['trailer']}", parse_mode='HTML', reply_markup=markup)
    await call.message.delete()
    
@dp.callback_query_handler(text_contains='page_', state=FilmRental.select_film)
async def show_films_page(call: types.CallbackQuery, state: FSMContext):
    films = get_films_in_rental() # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤ —è–∫—ñ —î –≤ –ø—Ä–æ–∫–∞—Ç—ñ
    film_id = int(call.data.split('_')[-1])
    film  =  films[film_id-1]
    
    trailer = film['trailer']
    image = film['image']
    
    markup = gen_keybord_pagination(films, current_page=film_id)
    markup.add(
        types.InlineKeyboardButton(text='üé¨ –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ —é—Ç—É–±', url=trailer),
        types.InlineKeyboardButton(text='üé¨ –¢—Ä–µ–π–ª–µ—Ä', callback_data='trailer'),
        types.InlineKeyboardButton(text='üéüÔ∏è –ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫', callback_data='buy_ticket'),
        types.InlineKeyboardButton(text='üëà –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main_back')
    )
    
    text = f'üé¨ <b>–§—ñ–ª—å–º –≤ –ø—Ä–æ–∫–∞—Ç—ñ:</b>\n\n'
    text += f"<b>–ù–∞–∑–≤–∞:</b> {film['title']}\n"
    text += f"<b>–û–ø–∏—Å:</b> {film['description']}\n\n"
    text += f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {film['rating']}\n"
    text += f"<b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {film['duration']}\n"
    text += f"<b>–ñ–∞–Ω—Ä:</b> {film['genre']}\n"
    text += f"<b>–¶—ñ–Ω–∞ –±—ñ–ª–µ—Ç—É:</b> {film['price']} –≥—Ä–Ω\n"
    
    await call.message.answer_photo(image, caption=text, reply_markup=markup, parse_mode='HTML')
    await call.message.delete()
    
    await FilmRental.select_film.set()
    
    await state.update_data(film = film)